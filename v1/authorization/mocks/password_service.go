// Code generated by MockGen. DO NOT EDIT.
// Source: ./v1/authorization/http_server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	influxdb "github.com/influxdata/influxdb/v2"
	reflect "reflect"
)

// MockPasswordService is a mock of PasswordService interface
type MockPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordServiceMockRecorder
}

// MockPasswordServiceMockRecorder is the mock recorder for MockPasswordService
type MockPasswordServiceMockRecorder struct {
	mock *MockPasswordService
}

// NewMockPasswordService creates a new mock instance
func NewMockPasswordService(ctrl *gomock.Controller) *MockPasswordService {
	mock := &MockPasswordService{ctrl: ctrl}
	mock.recorder = &MockPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPasswordService) EXPECT() *MockPasswordServiceMockRecorder {
	return m.recorder
}

// SetPassword mocks base method
func (m *MockPasswordService) SetPassword(ctx context.Context, id influxdb.ID, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPassword", ctx, id, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPassword indicates an expected call of SetPassword
func (mr *MockPasswordServiceMockRecorder) SetPassword(ctx, id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPassword", reflect.TypeOf((*MockPasswordService)(nil).SetPassword), ctx, id, password)
}

// SetPasswordHash mocks base method
func (m *MockPasswordService) SetPasswordHash(ctx context.Context, id influxdb.ID, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPasswordHash", ctx, id, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPasswordHash indicates an expected call of SetPasswordHash
func (mr *MockPasswordServiceMockRecorder) SetPasswordHash(ctx, id, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPasswordHash", reflect.TypeOf((*MockPasswordService)(nil).SetPasswordHash), ctx, id, hash)
}
